// Animations
// ----------------------------------------------------------------------------
@keyframes animSVGPath {
	to { opacity: 1; stroke-dashoffset: 0; }
}
@keyframes anim360 {
	to { transform: rotate(360deg); }
}
@keyframes animFadeIn {
	  0% { opacity: 0; }
	100% { opacity: 1; }
}
@keyframes animHide {
	  0% { opacity: 1; left: 0; }
	 99% { opacity: 0; left: 0; }
	100% { opacity: 0; left: -200%; }
}
@keyframes animSlideInLeft {
	  0% { transform: translate3d(-100%,0,0); }
	100% { transform: translate3d(   0%,0,0); }
}
@keyframes animSlideInRight {
	  0% { transform: translate3d(100%,0,0); }
	100% { transform: translate3d(  0%,0,0); }
}
@keyframes animBounceUp {
	  0% { transform: translate3d(0, 4.8rem,0); }
	 60% { transform: translate3d(0,-1.2rem,0); }
	100% { transform: translate3d(0,   0rem,0); }
}
@keyframes animVHSwipe {
	// updated at 768px
	  0% { opacity: 0; transform: translate3d(-1rem,0,0); }
	100% { opacity: 1; transform: translate3d( 0rem,0,0); }
}
@keyframes animRainbow2NavyBG {
	// this animation is used as only 1 iteration (never repeats)
	  0% { background-color: $hsl_red;    }
	 20% { background-color: $hsl_orange; }
	 40% { background-color: $hsl_yellow; }
	 60% { background-color: $hsl_aqua;   }
	 80% { background-color: $hsl_cyan;   }
	100% { background-color: $hsl_navy;   }
}
@keyframes animRainbowColor {
	$numRainbowIndex: 1;
	@each $keyframe in $arrRainbowKeyframes {
		#{$keyframe}% {
			color: nth($arrRainbowValues, $numRainbowIndex);
		}
		$numRainbowIndex: if($numRainbowIndex == length($arrRainbowValues), 1, $numRainbowIndex + 1); // once our array has reached its max, reset to beginning
	}
}
@keyframes animRainbowFill {
	$numRainbowIndex: 1;
	@each $keyframe in $arrRainbowKeyframes {
		#{$keyframe}% {
			fill: nth($arrRainbowValues, $numRainbowIndex);
		}
		$numRainbowIndex: if($numRainbowIndex == length($arrRainbowValues), 1, $numRainbowIndex + 1); // once our array has reached its max, reset to beginning
	}
}








// Page Load
// ----------------------------------------------------------------------------

// + header + \\
header.page_header .logo_main .wrap_logo-sandwich {
	animation: animFadeIn 800ms ease-in-out 200ms both;
}
header.page_header .logo_main .wrap_logo-video {
	animation: animFadeIn 800ms ease-in-out 520ms both;
}
header.page_header .wrap_tagline {
	animation: animFadeIn 800ms ease-in-out 1000ms both; // could transition fill instead?
}

// + rainbow letters + \\
$numDelay: 600;
@for $i from 1 through 5 { // assumes 5 letters
	// webkit does not seem to handle the animations being paired together, so we split them into 2 selectors
	svg.logo_video-rainbow g.rainbow_letter-#{$i} {
		animation: animFadeIn 400ms ease-in-out #{$numDelay}ms both;
	}
	svg.logo_video-rainbow g.rainbow_letter-#{$i} path {
		animation: animBounceUp 400ms $easeBounce #{$numDelay}ms both;
	}
	$numDelay: $numDelay + 100;
}

// + record letters + \\
$numDelay: 600;
@for $i from 1 through 6 { // assumes 6 letters
	svg.logo_video-record g.record_letter-#{$i} {
		animation: animFadeIn 400ms ease-in-out #{$numDelay}ms both;
	}
	svg.logo_video-record g.record_letter-#{$i} path {
		animation: animBounceUp 400ms $easeBounce #{$numDelay}ms both;
	}
	$numDelay: $numDelay + 100;
}

// + vhs letters + \\
$numDelay: 800;
@for $i from 1 through 5 { // assumes 5 letters
	svg.logo_video-vhs g path.group_path-#{$i} {
		animation: animVHSwipe 480ms $easeBounce #{$numDelay}ms both;
	}
	$numDelay: $numDelay + 100;
}

// + nav primary + \\
nav.nav_primary a.nav_toggle .nav_icon {
	.line-1 {
		animation: animSlideInLeft 400ms ease-out 1200ms both;
	}
	.line-2 {
		animation: animSlideInRight 400ms ease-out 1500ms both;
	}
	.line-3 {
		animation: animSlideInLeft 400ms ease-out 1800ms both;
	}
	.nav_line .line_bg {
		animation: animRainbow2NavyBG 1000ms linear 1200ms;
	}
	@for $i from 1 through 3 {
		html[data-ready="ready"] & .line-#{$i} {
			animation: none;
		}
	}
}

// + footer + \\
footer.page_footer {
	animation: animFadeIn 800ms ease-in-out 1800ms both; // final animated element
}

// + nav filter + \\
nav.nav_filter {
	animation: animFadeIn 800ms ease-in-out 1200ms both;
}

// + isotope loader + \\
section.iso_container .iso_loader .wrap_graphics {
	animation: animFadeIn 1000ms ease-in-out forwards;
}

// + page sections + \\
section.people_main,
section.press_section,
section.projects_section {
	animation: animFadeIn 800ms ease-in-out 1200ms both;
}
section.press_sidebar {
	animation: animFadeIn 800ms ease-in-out 1600ms both;
}

// section.people_main {
// 	$numDelay: 1200;
// 	@for $i from 1 through 20 {
// 		article:nth-child(#{$i}) {
// 			animation: animFadeIn 600ms ease-in-out #{$numDelay}ms both, animBounceUp 600ms $easeBounce #{$numDelay}ms both;
// 		}
// 		$numDelay: $numDelay + 100;
// 	}
// }

a.link_people-all {
	animation: animFadeIn 600ms ease-in-out 1200ms both, animBounceUp 600ms $easeBounce 1200ms both;
}

// SHOULD I DECLARE ANIMATION NONE FOR THINGS LIKE SECTION FADES ???










@media only screen and (min-width: 768px) {

// ==|== base =================================================================
// ============================================================================

	// Animations
	// ----------------------------------------------------------------------------
	@keyframes animSlideUp {
		  0% { opacity: 0; transform: translate3d(0,2rem,0); }
		100% { opacity: 1; transform: translate3d(0,0rem,0); }
	}

	@keyframes animModalIn {
		  0% { opacity: 0; transform: translate3d(0,10rem,0); }
		100% { opacity: 1; transform: translate3d(0,0rem,0); }
	}
	@keyframes animModalOut {
		  0% { opacity: 1; transform: translate3d(0,0rem,0); }
		100% { opacity: 0; transform: translate3d(0,10rem,0); }
	}

	@keyframes animBounceUpFade {
		  0% { transform: translate3d(0, 4.8rem,0); opacity: 0; }
		 60% { transform: translate3d(0,-0.8rem,0);             }
		100% { transform: translate3d(0,   0rem,0); opacity: 1; }
	}

	@keyframes animBounceInUp {
		  0% { transform: translate3d(0, 300rem,0); opacity: 0; }
		 60% { transform: translate3d(0,  -2rem,0); opacity: 1; }
		 75% { transform: translate3d(0,   1rem,0);             }
		 90% { transform: translate3d(0,-0.5rem,0);             }
		100% { transform: translate3d(0,   0rem,0); opacity: 1; }
	}
	@keyframes animBounceOutDown {
		  0% { transform: translate3d(0,  0rem,0); opacity: 1; }
		 20% { transform: translate3d(0,  1rem,0);             }
		 40%,
		 45% { transform: translate3d(0, -2rem,0); opacity: 1; }
		100% { transform: translate3d(0,100rem,0); opacity: 0; }
		// less than initial value of 300rem... animation is too quick otherwise
	}

	@keyframes animVHSwipe {
		// update animation from its initial values
		  0% { transform: translate3d(-1.6rem,0,0); opacity: 0; }
		 50% { transform: translate3d( 0.4rem,0,0);             }
		 75% { transform: translate3d(-0.2rem,0,0);             }
		100% { transform: translate3d(   0rem,0,0); opacity: 1; }
	}
	@keyframes animRainbowColorBorder {
		  0% { color: $hsl_red;    border-color: $hsl_red;    }
		 26% { color: $hsl_orange; border-color: $hsl_orange; }
		 44% { color: $hsl_yellow; border-color: $hsl_yellow; }
		 74% { color: $hsl_aqua;   border-color: $hsl_aqua;   }
		 82% { color: $hsl_cyan;   border-color: $hsl_cyan;   }
		100% { color: $hsl_red;    border-color: $hsl_red;    }
	}
	@keyframes animRainbowFill-steps {
		$numAnimPercent: 0;
		@each $color in $arrRainbowValues {
			#{$numAnimPercent}% {
				fill: $color;
			}
			$numAnimPercent: $numAnimPercent + 20;
		}
	}

	// cascading rainbow letters 1 - 5
	$numRainbowStepIndex: 1;
	@for $i from 1 through length($arrRainbowValues) {
		@keyframes animRainbowFill-step#{$i} {
			$numAnimPercent: 0;
			@each $color in $arrRainbowValues {
				#{$numAnimPercent}% {
					fill: nth($arrRainbowValues, $numRainbowStepIndex);
				}
				$numAnimPercent: $numAnimPercent + 20;
				$numRainbowStepIndex: if($numRainbowStepIndex == length($arrRainbowValues), 1, $numRainbowStepIndex + 1); // once our array has reached its max, reset
			}
		}
		$numRainbowStepIndex: $numRainbowStepIndex + 1; // increment $numRainbowStepIndex by 1 so we can offset each animation
	}

	// length($arrRainbowValues) - 2

	// cascading rainbow stripes 1 - 3

	@keyframes animRainbowStripe-step1 {
		  0% { background-color: $hsl_red; }
		 33% { background-color: $hsl_orange; }
		 66% { background-color: $hsl_yellow; }
		100% { background-color: $hsl_red; }
	}
	@keyframes animRainbowStripe-step2 {
		  0% { background-color: $hsl_orange; }
		 33% { background-color: $hsl_yellow; }
		 66% { background-color: $hsl_red; }
		100% { background-color: $hsl_orange; }
	}
	@keyframes animRainbowStripe-step3 {
		  0% { background-color: $hsl_yellow; }
		 33% { background-color: $hsl_red; }
		 66% { background-color: $hsl_orange; }
		100% { background-color: $hsl_yellow; }
	}


	// Page Load
	// ----------------------------------------------------------------------------
	nav.nav_filter,
	nav.nav_primary a.nav_toggle .nav_icon .nav_line,
	nav.nav_primary a.nav_toggle .nav_icon .nav_line .line_bg {
		animation: none !important; // important seems to be required here...
	}

	// + header + \\
	html[data-ready="ready"] .logo_main .wrap_logo-sandwich,
	html[data-ready="ready"] header.page_header .logo_main .wrap_logo-video {
		animation: none;
	}
/*
	html[data-ready="ready"] .logo_main .wrap_logo-sandwich,
	html[data-ready="ready"] svg.logo_video-rainbow g,
	html[data-ready="ready"] svg.logo_video-rainbow g path,
	html[data-ready="ready"] svg.logo_video-vhs g path {
		animation: none;
	}
*/
	html[data-ready="ready"] body.home .logo_main:hover {
		@for $i from 1 through 5 { // assumes 5 letters
			.wrap_video-rainbow svg g.rainbow_letter-#{$i} path {
				animation: animRainbowFill-step#{$i} 400ms steps(1) infinite reverse;
			}
			.wrap_video-vhs svg g path.group_path-#{$i} {
				animation: animRainbowFill-step#{$i} 400ms steps(1) infinite reverse;
			}
		}
		.wrap_video-record svg {
			animation: animRainbowFill-steps 600ms steps(1) infinite;
		}
	}
	html[data-ready="ready"] body:not(.home) .logo_main {
		.wrap_logo-sandwich,
		.wrap_logo-video {
			transition: opacity 260ms ease-in-out;
		}
	}
	html[data-ready="ready"] body:not(.home) .logo_main a.fix_webkit-svg {
		&:hover {
			@for $i from 1 through 5 { // assumes 5 letters
				& ~ .wrap_video-rainbow svg g.rainbow_letter-#{$i} path {
					animation: animRainbowFill-step#{$i} 400ms steps(1) infinite reverse;
				}
				& ~ .wrap_video-vhs svg g path.group_path-#{$i} {
					animation: animRainbowFill-step#{$i} 400ms steps(1) infinite reverse;
				}
			}
			& ~ .wrap_video-record svg {
				animation: animRainbowFill-steps 600ms steps(1) infinite;
			}
		}
		&:active + .wrap_logo-sandwich,
		&:active ~ .wrap_logo-video {
			opacity: 0.8;
		}
	}
	header.page_header .wrap_tagline {
		animation: animSlideUp 400ms ease-in-out 1000ms both;
	}
	// + nav primary + \\
	$numDelay: 600;
	@for $i from 1 through 5 { // assumes 5 nav items (excluding twitter and search)
		nav.nav_primary .wrap_nav ul li:nth-child(#{$i}) {
			animation: animBounceUpFade 400ms $easeBounce #{$numDelay}ms both;
		}
		$numDelay: $numDelay + 100;
	}
	nav.nav_primary .wrap_nav ul li.nav_twitter {
		animation: animFadeIn 600ms ease-in-out 1600ms both;
	}
	nav.nav_primary .wrap_nav ul li.nav_search form svg.ui_search path {
		animation: animSVGPath 1000ms $easeBounce 1600ms forwards;
	}
	html[data-ready="ready"] nav.nav_primary .wrap_nav ul li.nav_search form svg.ui_search path {
/*
		opacity: 1;
		stroke-dasharray: 0;
		stroke-dashoffset: 0;
		animation: none;
*/
		transition: stroke 260ms ease-in-out;
	}

	// + nav filter + \\
	$numDelay: 1000;
	@for $i from 1 through 20 { // assume a maximum of 20 nav items
		nav.nav_filter .wrap_dropdown ul li:nth-child(#{$i}) {
			animation: animBounceUpFade 300ms $easeBounce #{$numDelay}ms both;
		}
		$numDelay: $numDelay + 40;
	}

}
